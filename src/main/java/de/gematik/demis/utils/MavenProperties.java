package de.gematik.demis.utils;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MavenProperties {

    private static Logger LOG = LoggerFactory.getLogger(MavenProperties.class.getName());

    private static final String PATH_PREFIX = "/META-INF/maven/";
    private static final String PATH_POSTFIX = "/pom.properties";

    final String propertiesPath;

    private String versionNumber = "";

    /**
     * Uses the resource path from classForResource to load the pom.properties of the given groupID and artifactID.
     */
    public MavenProperties(final String groupID, final String artifactID) {
        propertiesPath = PATH_PREFIX + groupID + "/" + artifactID + PATH_POSTFIX;

        try {
            final InputStream resourceStream = getResourceAsStream(propertiesPath);
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(resourceStream));

            // skip "#Generated by Maven"
            reader.readLine();

            // find "version=..."
            String line;
            while (null != (line = reader.readLine())) {
                String[] parts = line.split("[ \t]*=[ \t]*");
                if ("version".equals(parts[0])) {
                    versionNumber = parts[1];
                    break;
                }
            }

            reader.close();

        } catch (Exception e) {
            // can't load pom.properites => version information will be unavailable
            LOG.debug("Couldn't load pom.properties!");
        }
    }

    private InputStream getResourceAsStream(final String propertiesPath) {
        return getClass().getResourceAsStream(propertiesPath);
    }

    /**
     * Returns the version number from the Maven generated pom.properies or "" if not available.
     **/
    public String getVersionNumber() {
        return versionNumber;
    }

}
